from pyrogram import filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import bot
import sqlite3
import logging

# /start → عرض المقررات أو شاشة البداية
@bot.on_message(filters.command("start"))
async def start_handler(client, message):
    await show_main_menu(client, message, message.from_user.id, message.from_user.first_name)

# زر 🔙 يرجع للمقررات أو البداية حسب الحالة
@bot.on_callback_query(filters.regex("^back_to_start$"))
async def handle_back_to_start(client, callback_query):
    await show_main_menu(client, callback_query.message, callback_query.from_user.id, callback_query.from_user.first_name)

# دالة ذكية لعرض القائمة الرئيسية
async def show_main_menu(client, msg_obj, user_id, user_first_name):
    conn = sqlite3.connect("college.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT courses.id, courses.name FROM courses
        JOIN user_courses ON user_courses.course_id = courses.id
        WHERE user_courses.user_id = ?
    """, (user_id,))
    courses = cursor.fetchall()
    conn.close()

    if courses:
        text = "📋 هذه هي مقرراتك المسجلة:\n\n"
        buttons = [[InlineKeyboardButton(name, callback_data=f"course_{cid}")] for cid, name in courses]
        await msg_obj.edit_text(
            text + "\n👇 اختر مقرر للاطلاع على محتواه:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        welcome = (
            f"ازيك يا {user_first_name} 👋\n"
            "أنا بوت كلية الحاسبات والذكاء الاصطناعي بجامعة بنها 🎓\n"
            "اختار المستوى الدراسي من الأزرار التالية 👇"
        )
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("🎓 المستوى الأول", callback_data="level_1")],
            [InlineKeyboardButton("🎓 المستوى الثاني", callback_data="level_2")],
            [InlineKeyboardButton("🎓 المستوى الثالث", callback_data="level_3")],
            [InlineKeyboardButton("🎓 المستوى الرابع", callback_data="level_4")],
            [InlineKeyboardButton("📋 تسجيل مقرراتي", callback_data="start_registration")]
        ])
        await msg_obj.edit_text(welcome, reply_markup=keyboard)

# اختيار الفصل الدراسي
@bot.on_callback_query(filters.regex("^level_[1-4]$"))
async def choose_term(client, callback_query):
    level = int(callback_query.data.split("_")[1])
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("📘 الفصل الأول", callback_data=f"term_1_level_{level}")],
        [InlineKeyboardButton("📗 الفصل الثاني", callback_data=f"term_2_level_{level}")],
        [InlineKeyboardButton("🔙 رجوع", callback_data="back_to_start")]
    ])
    await callback_query.message.edit_text("اختر الفصل الدراسي:", reply_markup=keyboard)

# عرض مقررات المستوى والترم
@bot.on_callback_query(filters.regex("^term_[1-2]_level_[1-4]$"))
async def show_courses(client, callback_query):
    data = callback_query.data.split("_")
    term = int(data[1])
    level = int(data[3])

    conn = sqlite3.connect("college.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM courses WHERE level = ? AND term = ?", (level, term))
    courses = cursor.fetchall()
    conn.close()

    if not courses:
        await callback_query.message.edit_text("❌ لا توجد مقررات لهذا الفصل.")
        return

    buttons = [[InlineKeyboardButton(f"📘 {name}", callback_data=f"course_{cid}")] for cid, name in courses]
    buttons.append([InlineKeyboardButton("🔙 رجوع", callback_data="back_to_start")])
    await callback_query.message.edit_text("📚 اختر مقرر:", reply_markup=InlineKeyboardMarkup(buttons))

# عرض محتوى مقرر
@bot.on_callback_query(filters.regex("^course_\\d+$"))
async def course_options(client, callback_query):
    course_id = int(callback_query.data.split("_")[1])
    conn = sqlite3.connect("college.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, has_sections FROM courses WHERE id = ?", (course_id,))
    course = cursor.fetchone()
    conn.close()

    if not course:
        await callback_query.message.edit_text("❌ لم يتم العثور على هذا المقرر.")
        return

    course_name, has_sections = course
    buttons = [
        [InlineKeyboardButton("📚 المحاضرات", callback_data=f"lectures_{course_id}")],
        [InlineKeyboardButton("🧪 الامتحانات", callback_data=f"exams_{course_id}")]
    ]

    if has_sections:
        buttons.append([InlineKeyboardButton("📥 سلايدات السكاشن", callback_data=f"sections_{course_id}")])

    buttons.append([InlineKeyboardButton("⏰ المواعيد المهمة", callback_data=f"deadlines_{course_id}")])
    buttons.append([InlineKeyboardButton("🔙 رجوع", callback_data="back_to_start")])

    await callback_query.message.edit_text(
        f"📘 محتوى مقرر: {course_name}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# عرض المحاضرات
@bot.on_callback_query(filters.regex("^lectures_\\d+$"))
async def show_lectures(client, callback_query):
    course_id = int(callback_query.data.split("_")[1])
    conn = sqlite3.connect("college.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, title FROM lectures WHERE course_id = ?", (course_id,))
    lectures = cursor.fetchall()
    conn.close()

    if not lectures:
        await callback_query.message.edit_text("❌ لا توجد محاضرات.")
        return

    buttons = [
        [InlineKeyboardButton(f"📄 {title}", callback_data=f"open_lecture_{lid}")]
        for lid, title in lectures
    ]
    buttons.append([InlineKeyboardButton("🔙 رجوع", callback_data="back_to_start")])
    await callback_query.message.edit_text("اختر المحاضرة:", reply_markup=InlineKeyboardMarkup(buttons))
